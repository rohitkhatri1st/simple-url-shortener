// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	model "simple-url-shortener/model"

	mock "github.com/stretchr/testify/mock"
)

// InMemoryDb is an autogenerated mock type for the InMemoryDb type
type InMemoryDb struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *InMemoryDb) FindAll() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// FindByKey provides a mock function with given fields: key
func (_m *InMemoryDb) FindByKey(key string) (*model.UrlData, error) {
	ret := _m.Called(key)

	var r0 *model.UrlData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UrlData, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UrlData); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UrlData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUrlByShortKeyIndex provides a mock function with given fields: shortKey
func (_m *InMemoryDb) FindUrlByShortKeyIndex(shortKey string) (string, error) {
	ret := _m.Called(shortKey)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(shortKey)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(shortKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseCounter provides a mock function with given fields: key
func (_m *InMemoryDb) IncreaseCounter(key string) {
	_m.Called(key)
}

// Insert provides a mock function with given fields: key, value
func (_m *InMemoryDb) Insert(key string, value model.UrlData) {
	_m.Called(key, value)
}

// InsertUniqueAndGet provides a mock function with given fields: key, value
func (_m *InMemoryDb) InsertUniqueAndGet(key string, value model.UrlData) *model.UrlData {
	ret := _m.Called(key, value)

	var r0 *model.UrlData
	if rf, ok := ret.Get(0).(func(string, model.UrlData) *model.UrlData); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UrlData)
		}
	}

	return r0
}

type mockConstructorTestingTNewInMemoryDb interface {
	mock.TestingT
	Cleanup(func())
}

// NewInMemoryDb creates a new instance of InMemoryDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInMemoryDb(t mockConstructorTestingTNewInMemoryDb) *InMemoryDb {
	mock := &InMemoryDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
